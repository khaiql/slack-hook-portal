require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe IncomingHooksController, type: :controller do
  describe "#index" do
    let!(:hooks) { create_list(:incoming_hook, 3) }
    it "assigns list of incoming_hooks" do
      get :index
      expect(assigns[:incoming_hooks]).to match_array hooks
    end
  end

  describe "GET #show" do
    let(:hook) { create(:incoming_hook) }
    it "assigns incoming_hook" do
      get :show, id: hook.slug
      expect(assigns[:incoming_hook]).to eq hook
    end
  end

  describe "POST #create" do
    let(:valid_attributes) { attributes_for(:incoming_hook) }
    let(:invalid_attributes) { attributes_for(:incoming_hook, name: '') }
    let(:valid_params) { {incoming_hook: valid_attributes} }
    let(:invalid_params) { {incoming_hook: invalid_attributes} }
    context 'valid attributes' do
      it "creates new incoming_hook" do
        expect { post :create, valid_params }.to change(IncomingHook, :count).by(1)
      end

      it "redirects to show incoming_hook" do
        post :create, valid_params
        hook = IncomingHook.last
        expect(response).to redirect_to incoming_hook_path(hook)
      end
    end

    context "invalid params" do
      it "does not create incoming_hook" do
        expect { post :create, invalid_params }.to change(IncomingHook, :count).by(0)
      end

      it "renders new template" do
        post :create, invalid_params
        expect(response).to render_template :new
      end
    end
  end

  describe "GET #show" do
    let!(:incoming_hook) { create(:incoming_hook) }
    before do
      get :show, {id: incoming_hook.slug}
    end
    it "assigns incoming_hook variable" do
      expect(assigns[:incoming_hook]).to eq incoming_hook
    end
  end

  describe "DELETE #destroy" do
    let!(:incoming_hook) { create(:incoming_hook) }

    it "deletes incoming_hook record" do
      expect { delete :destroy, id: incoming_hook.slug }.to change(IncomingHook, :count).by(-1)
    end
  end

  describe "POST #update" do
    let!(:incoming_hook) { create(:incoming_hook) }
    it "updates incoming_hook data" do

    end
  end
end
