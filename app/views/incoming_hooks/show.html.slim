#test-success-alert.alert-box.info.radius data-alert='true' style="display: none; margin: 10px 0"
  #message-container
  a.close href='#' &times;

h1 Incoming Hook

p
  strong Name:&nbsp;
  = @incoming_hook.name

p
  strong Webhook URL:&nbsp;
  = @incoming_hook.webhook_url

p
  strong Channel:&nbsp;
  = @incoming_hook.channel

p
  strong Display Name:&nbsp;
  = @incoming_hook.username

p
  strong Icon URL:&nbsp;
  = @incoming_hook.icon_url

p
  strong Icon Emoji:&nbsp;
  = @incoming_hook.icon_emoji

h4 How to use
p
  | Trigger the web hook with default settings via a GET call to provided trigger url.
  br
  | You can also send custom message using either GET or POST method.


h6.subheader Send default message:&nbsp;
.panel.code
  = "curl #{trigger_incoming_hook_url(@incoming_hook)}"

h6.subheader Send custom message via GET (message needs to be url encoded):&nbsp;
.panel.code
  = "curl #{trigger_incoming_hook_url(@incoming_hook)}?message=hello%20world"

h6.subheader Send custom message via POST with JSON format: &nbsp
.panel.code
  = "curl -H \"Content-Type: application/json\" -d '{\"message\": \"hello world\"}' #{trigger_incoming_hook_url(@incoming_hook)}"

a.button.success#test-btn data-url=trigger_incoming_hook_path(@incoming_hook)
  | Test Webhook
| &nbsp;
= link_to 'Edit', edit_incoming_hook_path(@incoming_hook), class: 'button primary'
| &nbsp;
= link_to 'Back', incoming_hooks_path, class: 'button secondary'
